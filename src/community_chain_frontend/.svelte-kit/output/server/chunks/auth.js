import"@dfinity/auth-client";import{HttpAgent as r,Actor as a}from"@dfinity/agent";import{d as o,w as s}from"./index.js";const d=({IDL:t})=>{const e=t.Record({id:t.Text,status:t.Text,reward:t.Nat,assignee:t.Opt(t.Principal),title:t.Text,creator:t.Principal,description:t.Text,created_at:t.Int,location:t.Text});return t.Service({applyForActivity:t.Func([t.Text],[t.Bool],[]),completeActivity:t.Func([t.Text],[t.Bool],[]),createActivity:t.Func([t.Text,t.Text,t.Text,t.Nat],[t.Text],[]),getActivity:t.Func([t.Text],[t.Opt(e)],["query"]),getMyAssignedActivities:t.Func([],[t.Vec(e)],["query"]),getMyCreatedActivities:t.Func([],[t.Vec(e)],["query"]),listActivities:t.Func([],[t.Vec(e)],["query"])})},i=process.env.CANISTER_ID_COMMUNITY_CHAIN_BACKEND,l=(t,e={})=>{const c=e.agent||new r({...e.agentOptions});return e.agent&&e.agentOptions&&console.warn("Detected both agent and agentOptions passed to createActor. Ignoring agentOptions and proceeding with the provided agent."),process.env.DFX_NETWORK!=="ic"&&c.fetchRootKey().catch(n=>{console.warn("Unable to fetch root key. Check to ensure that your local replica is running"),console.error(n)}),a.createActor(d,{agent:c,canisterId:t,...e.actorOptions})};i&&l(i);const u=s({isAuthenticated:!1,identity:null,principal:null}),y=o(u,t=>t.isAuthenticated);export{u as a,y as i};
