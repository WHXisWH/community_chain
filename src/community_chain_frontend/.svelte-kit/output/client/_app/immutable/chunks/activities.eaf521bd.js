import{e as i}from"./auth.cb16a316.js";const n=async()=>{try{console.log("getActivities: 関数が呼び出されました");const t=await i();if(console.log("getActivities: アクター取得成功",t),!t)throw console.error("getActivities: アクターがnullです"),new Error("Actor not initialized");console.log("getActivities: listActivities 呼び出し前");const e=await t.listActivities();return console.log("getActivities: 結果を取得",e),e}catch(t){throw console.error("Failed to fetch activities:",t),t}},a=async t=>{try{console.log(`getActivity: ID ${t} の詳細を取得中`);const e=await i();if(!e)throw console.error(`getActivity: アクターがnullです (ID: ${t})`),new Error("Actor not initialized");console.log(`getActivity: getActivity 呼び出し前 (ID: ${t})`);const o=await e.getActivity(t);return console.log(`getActivity: 結果を取得 (ID: ${t})`,o),o}catch(e){throw console.error(`Failed to fetch activity ${t}:`,e),e}},y=async(t,e,o,r)=>{try{console.log("createActivity: 新規活動作成開始",{title:t,description:e,location:o,reward:r});const c=await i();if(!c)throw console.error("createActivity: アクターがnullです"),new Error("Actor not initialized");console.log("createActivity: createActivity 呼び出し前");const s=await c.createActivity(t,e,o,Number(r));return console.log("createActivity: 活動作成成功",s),s}catch(c){throw console.error("Failed to create activity:",c),c}},A=async t=>{try{console.log(`applyForActivity: ID ${t} の活動に参加申請`);const e=await i();if(!e)throw console.error(`applyForActivity: アクターがnullです (ID: ${t})`),new Error("Actor not initialized");console.log(`applyForActivity: applyForActivity 呼び出し前 (ID: ${t})`);const o=await e.applyForActivity(t);return console.log(`applyForActivity: 参加申請結果 (ID: ${t})`,o),o}catch(e){throw console.error(`Failed to apply for activity ${t}:`,e),e}},g=async t=>{try{console.log(`completeActivity: ID ${t} の活動完了報告`);const e=await i();if(!e)throw console.error(`completeActivity: アクターがnullです (ID: ${t})`),new Error("Actor not initialized");console.log(`completeActivity: completeActivity 呼び出し前 (ID: ${t})`);const o=await e.completeActivity(t);return console.log(`completeActivity: 完了報告結果 (ID: ${t})`,o),o}catch(e){throw console.error(`Failed to complete activity ${t}:`,e),e}},v=async()=>{try{console.log("getMyCreatedActivities: 自分が作成した活動を取得");const t=await i();if(!t)throw console.error("getMyCreatedActivities: アクターがnullです"),new Error("Actor not initialized");console.log("getMyCreatedActivities: getMyCreatedActivities 呼び出し前");const e=await t.getMyCreatedActivities();return console.log("getMyCreatedActivities: 結果を取得",e),e}catch(t){throw console.error("Failed to fetch created activities:",t),t}},w=async()=>{try{console.log("getMyAssignedActivities: 自分が参加している活動を取得");const t=await i();if(!t)throw console.error("getMyAssignedActivities: アクターがnullです"),new Error("Actor not initialized");console.log("getMyAssignedActivities: getMyAssignedActivities 呼び出し前");const e=await t.getMyAssignedActivities();return console.log("getMyAssignedActivities: 結果を取得",e),e}catch(t){throw console.error("Failed to fetch assigned activities:",t),t}};export{a,A as b,g as c,y as d,v as e,w as f,n as g};
